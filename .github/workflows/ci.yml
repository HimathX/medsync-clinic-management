name: CI Pipeline

on:
  push:
    branches: ['**']  # Run on all branches
  pull_request:
    branches: ['**']

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: medsync_db
          MYSQL_USER: medsync_user
          MYSQL_PASSWORD: medsync_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Lint with flake8
        working-directory: ./backend
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        working-directory: ./backend
        env:
          DB_HOST: 127.0.0.1
          DB_USER: medsync_user
          DB_PASSWORD: medsync_password
          DB_NAME: medsync_db
          DB_PORT: 3306
          SECRET_KEY: group6
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          PYTHONPATH: .  # ⬅️ Add this to set Python path
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=term -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present -- --coverage --watchAll=false --passWithNoTests

      - name: Build
        run: npm run build

      - name: Upload coverage reports
        if: hashFiles('coverage/coverage-final.json') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
        continue-on-error: true

  database-validation:
    name: Database Schema Validation
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: medsync_db
          MYSQL_USER: medsync_user
          MYSQL_PASSWORD: medsync_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for MySQL to be ready
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u medsync_user -pmedsync_password &> /dev/null; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Configure MySQL and grant required privileges
        run: |
          # Enable function creators
          mysql -h 127.0.0.1 -u root -proot_password -e "SET GLOBAL log_bin_trust_function_creators = 1;"
          
          # Grant all privileges needed for DEFINER
          mysql -h 127.0.0.1 -u root -proot_password -e "GRANT ALL PRIVILEGES ON *.* TO 'medsync_user'@'%' WITH GRANT OPTION;"
          mysql -h 127.0.0.1 -u root -proot_password -e "GRANT SYSTEM_USER ON *.* TO 'medsync_user'@'%';"
          mysql -h 127.0.0.1 -u root -proot_password -e "FLUSH PRIVILEGES;"
          
          echo "✅ MySQL configured with all required privileges"

      - name: Test tables creation
        run: |
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/1_tables.sql || exit 1
          echo "✅ Tables created successfully"
          
      - name: Test functions
        run: |
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/2_functions.sql || exit 1
          echo "✅ Functions created successfully"

      - name: Test procedures
        run: |
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/3_procedures.sql || exit 1
          echo "✅ Procedures created successfully"

      - name: Test triggers
        run: |
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/4_triggers.sql || exit 1
          echo "✅ Triggers created successfully"

      - name: Test records insertion
        run: |
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/5_records.sql || exit 1
          echo "✅ Records inserted successfully"

      - name: Test branch initialization
        run: |
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/6_branch_initialization.sql || exit 1
          echo "✅ Branches initialized successfully"

      - name: Test indexes
        run: |
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/7_indexes.sql || exit 1
          echo "✅ Indexes created successfully"

      - name: Validate database structure
        run: |
          echo "📊 Validating database structure..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "SHOW TABLES;"
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "SELECT COUNT(*) as 'Total Functions' FROM information_schema.ROUTINES WHERE ROUTINE_SCHEMA='medsync_db' AND ROUTINE_TYPE='FUNCTION';"
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "SELECT COUNT(*) as 'Total Procedures' FROM information_schema.ROUTINES WHERE ROUTINE_SCHEMA='medsync_db' AND ROUTINE_TYPE='PROCEDURE';"
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "SELECT COUNT(*) as 'Total Triggers' FROM information_schema.TRIGGERS WHERE TRIGGER_SCHEMA='medsync_db';"
          echo "✅ Database structure validated"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Backend Docker Build
        working-directory: ./backend
        run: |
          docker build -t medsync-backend:test .

      - name: Test Frontend Docker Build
        working-directory: ./frontend
        run: |
          docker build -t medsync-frontend:test .

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true  # ⬅️ Don't fail if upload fails

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true  # ⬅️ Don't fail if analysis fails