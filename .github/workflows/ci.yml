name: CI Pipeline

on:
  push:
    branches: ['**']  # Run on all branches
  pull_request:
    branches: ['**']

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: medsync_db
          MYSQL_USER: medsync_user
          MYSQL_PASSWORD: medsync_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Lint with flake8
        working-directory: ./backend
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run tests
        working-directory: ./backend
        env:
          DB_HOST: 127.0.0.1
          DB_USER: medsync_user
          DB_PASSWORD: medsync_password
          DB_NAME: medsync_db
          DB_PORT: 3306
          SECRET_KEY: group6
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          PYTHONPATH: .
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=term -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Run tests
        run: npm test --if-present -- --coverage --watchAll=false --passWithNoTests

      - name: Build
        run: npm run build

      - name: Upload coverage reports
        if: hashFiles('coverage/coverage-final.json') != ''
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
        continue-on-error: true

  database-validation:
    name: Database Schema Validation
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: medsync_db
          MYSQL_USER: medsync_user
          MYSQL_PASSWORD: medsync_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for MySQL to be ready
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u medsync_user -pmedsync_password &> /dev/null; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Configure MySQL and grant required privileges
        run: |
          # Enable function creators
          mysql -h 127.0.0.1 -u root -proot_password -e "SET GLOBAL log_bin_trust_function_creators = 1;"
          
          # Grant all privileges needed for DEFINER and role creation
          mysql -h 127.0.0.1 -u root -proot_password -e "GRANT ALL PRIVILEGES ON *.* TO 'medsync_user'@'%' WITH GRANT OPTION;"
          mysql -h 127.0.0.1 -u root -proot_password -e "GRANT SYSTEM_USER ON *.* TO 'medsync_user'@'%';"
          mysql -h 127.0.0.1 -u root -proot_password -e "GRANT CREATE USER ON *.* TO 'medsync_user'@'%';"
          mysql -h 127.0.0.1 -u root -proot_password -e "GRANT CREATE ROLE ON *.* TO 'medsync_user'@'%';"
          mysql -h 127.0.0.1 -u root -proot_password -e "GRANT ROLE_ADMIN ON *.* TO 'medsync_user'@'%';"
          mysql -h 127.0.0.1 -u root -proot_password -e "FLUSH PRIVILEGES;"
          
          echo "✅ MySQL configured with all required privileges"

      - name: Execute database scripts in correct order
        run: |
          echo "🚀 Starting database deployment in dependency order..."
          
          # Step 1: Create base tables
          echo "📋 Step 1/10: Creating tables..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/1_tables.sql || exit 1
          echo "✅ Tables created successfully"
          
          # Step 2: Create calculation functions
          echo "🔢 Step 2/10: Creating functions..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/2_functions.sql || exit 1
          echo "✅ Functions created successfully"

          # Step 3: Create stored procedures
          echo "⚙️ Step 3/10: Creating procedures..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/3_procedures.sql || exit 1
          echo "✅ Procedures created successfully"

          # Step 4: Create triggers
          echo "🎯 Step 4/10: Creating triggers..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/4_triggers.sql || exit 1
          echo "✅ Triggers created successfully"

          # Step 5: Insert reference data
          echo "📊 Step 5/10: Inserting reference data..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/5_records.sql || exit 1
          echo "✅ Records inserted successfully"

          # Step 6: Initialize branches
          echo "🏢 Step 6/10: Initializing branches..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/6_branch_initialization.sql || exit 1
          echo "✅ Branches initialized successfully"

          # Step 7: Create indexes for performance
          echo "🔍 Step 7/10: Creating indexes..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/7_indexes.sql || exit 1
          echo "✅ Indexes created successfully"

          # Step 8: Create audit tables and triggers (MUST BE BEFORE authorization)
          echo "📝 Step 8/10: Creating audit & security infrastructure..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/8_audit_security.sql || exit 1
          echo "✅ Audit tables and triggers created successfully"

          # Step 9: Create roles and authorization (DEPENDS ON audit tables)
          echo "🔐 Step 9/10: Creating roles and authorization..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/9_authorization.sql || exit 1
          echo "✅ Roles and permissions configured successfully"

          # Step 10: Create views with grants (DEPENDS ON roles)
          echo "👁️ Step 10/10: Creating views..."
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db < ./database/10_views.sql || exit 1
          echo "✅ Views created successfully"
          
          echo "🎉 Database deployment completed successfully!"

      - name: Validate database structure
        run: |
          echo "📊 Validating complete database structure..."
          
          # Validate tables
          echo "🗃️ Tables:"
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "SHOW TABLES;" | tee /dev/stderr | wc -l
          
          # Validate functions
          echo "🔢 Functions:"
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "SELECT COUNT(*) as 'Total Functions' FROM information_schema.ROUTINES WHERE ROUTINE_SCHEMA='medsync_db' AND ROUTINE_TYPE='FUNCTION';"
          
          # Validate procedures
          echo "⚙️ Procedures:"
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "SELECT COUNT(*) as 'Total Procedures' FROM information_schema.ROUTINES WHERE ROUTINE_SCHEMA='medsync_db' AND ROUTINE_TYPE='PROCEDURE';"
          
          # Validate triggers
          echo "🎯 Triggers:"
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "SELECT COUNT(*) as 'Total Triggers' FROM information_schema.TRIGGERS WHERE TRIGGER_SCHEMA='medsync_db';"
          
          # Validate views
          echo "👁️ Views:"
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "SELECT COUNT(*) as 'Total Views' FROM information_schema.VIEWS WHERE TABLE_SCHEMA='medsync_db';"
          
          # Validate roles
          echo "🔐 Roles:"
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password -e "SELECT User, Host FROM mysql.user WHERE User LIKE 'medsync_%' ORDER BY User;"
          
          # Validate audit tables
          echo "📝 Audit Tables:"
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA='medsync_db' AND TABLE_NAME IN ('audit_log', 'user_session', 'failed_login_attempt', 'data_access_log');"
          
          echo "✅ Database structure validation completed"

      - name: Test Row-Level Security functions
        run: |
          echo "🔒 Testing Row-Level Security (RLS) implementation..."
          
          # Test session context functions exist
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "
            SELECT ROUTINE_NAME 
            FROM information_schema.ROUTINES 
            WHERE ROUTINE_SCHEMA='medsync_db' 
            AND ROUTINE_NAME IN (
              'SetUserContext', 
              'GetCurrentUserId', 
              'GetCurrentUserRole', 
              'GetCurrentUserBranch',
              'VerifyPatientAccess',
              'VerifyDoctorPatientRelation',
              'VerifyBranchAccess'
            );" || exit 1
          
          echo "✅ All RLS functions are present"

      - name: Test audit triggers
        run: |
          echo "📝 Testing audit triggers..."
          
          # Check audit triggers exist
          mysql -h 127.0.0.1 -u medsync_user -pmedsync_password medsync_db -e "
            SELECT TRIGGER_NAME, EVENT_MANIPULATION, EVENT_OBJECT_TABLE
            FROM information_schema.TRIGGERS 
            WHERE TRIGGER_SCHEMA='medsync_db' 
            AND TRIGGER_NAME LIKE 'trg_%audit%'
            ORDER BY TRIGGER_NAME;" || exit 1
          
          echo "✅ Audit triggers are configured"

      - name: Verify role permissions
        run: |
          echo "🔐 Verifying role permissions..."
          
          # List all roles and their grants
          for role in medsync_admin medsync_manager medsync_doctor medsync_nurse medsync_receptionist medsync_pharmacist medsync_patient medsync_readonly; do
            echo "📋 Checking role: $role"
            mysql -h 127.0.0.1 -u medsync_user -pmedsync_password -e "SHOW GRANTS FOR '$role'@'%';" 2>/dev/null || echo "⚠️ Role $role not found (might not be created in CI)"
          done
          
          echo "✅ Role verification completed"

      - name: Database deployment summary
        if: success()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 DATABASE DEPLOYMENT SUCCESSFUL"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "✅ Tables:           Created"
          echo "✅ Functions:        Created"
          echo "✅ Procedures:       Created"
          echo "✅ Triggers:         Created"
          echo "✅ Reference Data:   Inserted"
          echo "✅ Branches:         Initialized"
          echo "✅ Indexes:          Created"
          echo "✅ Audit System:     Configured"
          echo "✅ Authorization:    Configured"
          echo "✅ Views:            Created"
          echo "✅ RLS Functions:    Operational"
          echo "✅ Security Roles:   Deployed"
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Backend Docker Build
        working-directory: ./backend
        run: |
          docker build -t medsync-backend:test .

      - name: Test Frontend Docker Build
        working-directory: ./frontend
        run: |
          docker build -t medsync-frontend:test .

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  deployment-readiness:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, database-validation, docker-build]
    if: success()
    
    steps:
      - name: All checks passed
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 ALL CI CHECKS PASSED - READY FOR DEPLOYMENT"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "✅ Backend tests passed"
          echo "✅ Frontend tests passed"
          echo "✅ Database validation passed"
          echo "✅ Docker builds successful"
          echo ""
          echo "📦 Artifacts ready for deployment"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"